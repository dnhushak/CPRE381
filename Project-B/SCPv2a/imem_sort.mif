DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

-- Sample C code:
--   if (a != b) c = a + b;
-- Assume a @ 0x0000($zero), b @ 0x0004($zero), c @ 0x0008($zero0
-- Assembly code:
     
CONTENT
BEGIN
-- Instruction formats
--R ======-----=====-----=====------
--I ======-----=====----------------
--J ======--------------------------
0 : 10001100000001000000000000000000;
1 : 10001100000001010000000000000100;
2 : 00100011101111011111111111101100;
3 : 10101111101111110000000000010000;
4 : 10101111101100110000000000001100;
5 : 10101111101100100000000000001000;
6 : 10101111101100010000000000000100;
7 : 10101111101100000000000000000000;
8 : 00100000100100100000000000000000;
9 : 00100000101100110000000000000000;
10 : 00100000000100000000000000000000;
11 : 00000010000100110100000000101010;
12 : 00010001000000000000000000010000;
13 : 00100010000100011111111111111111;
14 : 00000010001000000100000000101010;
15 : 00010101000000000000000000001011;
16 : 00000000000100010100100010000000;
17 : 00000010010010010101000000100000;
18 : 10001101010010110000000000000000;
19 : 10001101010011000000000000000100;
20 : 00000001100010110100000000101010;
21 : 00010001000000000000000000000101;
22 : 00100010010001000000000000000000;
23 : 00100010001001010000000000000000;
24 : 00001100000000000000000000100100;
25 : 00100010001100011111111111111111;
26 : 00001000000000000000000000001110;
27 : 00100010000100000000000000000001;
28 : 00001000000000000000000000001011;
29 : 10001111101100000000000000000000;
30 : 10001111101100010000000000000100;
31 : 10001111101100100000000000001000;
32 : 10001111101100110000000000001100;
33 : 10001111101111110000000000010000;
34 : 00100011101111010000000000010100;
35 : 00001000000000000000000000101101;
36 : 00000000000001010100100010000000;
37 : 00000000100010010100100000100000;
38 : 10001101001010000000000000000000;
39 : 10001101001010100000000000000100;
40 : 00000000000000000000000000000000;
41 : 00000000000000000000000000000000;
42 : 10101101001010100000000000000000;
43 : 10101101001010000000000000000100;
44 : 00000011111000000000000000001000;
[45..63] : 00000000; 			
END;
