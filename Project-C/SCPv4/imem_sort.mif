DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

-- Sample C code:
--   if (a != b) c = a + b;
-- Assume a @ 0x0000($zero), b @ 0x0004($zero), c @ 0x0008($zero0
-- Assembly code:
     
CONTENT
BEGIN
-- Instruction formats
--R ======-----=====-----=====------
--I ======-----=====----------------
--J ======--------------------------
0:00111100000010010000000000001111;
1:00100000000011101111111111110110;
2:00100000000010100000000000000001;
3:00100000000011000000000000001111;
4:00000000000000000000000000000000;
5:00000000000000000000000000000000;
6:00000000000000000000000000000000;
7:00000000000000000000000000000000;
8:00110101001100000000000000001111;
9:00110001100100000000000000000010;
10:00000000000010011000000010000010;
11:00101001100100000000000000011110;
12:00101001100100000000000000001010;
13:00000000000010011000000010000011;
14:00000000000011101000000010000011;
15:00000001001011101000000000100110;
16:00000001010011001000000000000100;
17:00000001010010011000000000000110;
18:00000001010011101000000000000111;
END;
