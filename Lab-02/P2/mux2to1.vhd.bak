library IEEE;
use IEEE.std_logic_1164.all;


entity mux2to1 is

  port(i_C              : in std_logic;
       i_X 		           : in std_logic;
       i_Y              : in std_logic;
       o_M 		           : out std_logic);

end Quadratic;

architecture structure of mux2to1 is
  
  -- Describe the component entities as defined in Adder.vhd 
  -- and Multiplier.vhd (not strictly necessary).
  component and2
    port(i_A             : in std_logic;
         i_B             : in std_logic;
         o_C             : out std_logic);
  end component;

  component or2
    port(i_A             : in std_logic;
         i_B             : in std_logic;
         o_C             : out std_logic);
  end component;
  
  component inv
    port(i_A             : in std_logic;
         o_C             : out std_logic);
  end component;

  -- Signals to store A*x, B*x
  signal sControl, sControlInv, sMuxX, sMuxY : std_logic;

begin

  
  ---------------------------------------------------------------------------
  -- Level 1: Calculate A*x, B*x
  ---------------------------------------------------------------------------
  g_Mult1: Multiplier
    port MAP(iCLK             => iCLK,
             iA               => cA,
             iB               => iX,
             oC               => sVALUE_Ax);

  g_Mult2: Multiplier
    port MAP(iCLK             => iCLK,
             iA               => cB,
             iB               => iX,
             oC               => sVALUE_Bx);
    
 ---------------------------------------------------------------------------
  -- Level 2: Calculate A*x*x, B*x+C
  ---------------------------------------------------------------------------
  g_Mult3: Multiplier
    port MAP(iCLK             => iCLK,
             iA               => sVALUE_Ax,
             iB               => iX,
             oC               => sVALUE_Axx);

  g_Add1: Adder
    port MAP(iCLK             => iCLK,
             iA               => sVALUE_Bx,
             iB               => cC,
             oC               => sVALUE_BxpC);
    
  ---------------------------------------------------------------------------
  -- Level 3: Calculate A*x*x + B*x + C
  ---------------------------------------------------------------------------
  g_Add2: Adder
    port MAP(iCLK             => iCLK,
             iA               => sVALUE_Axx,
             iB               => sVALUE_BxpC,
             oC               => oY);
  
end structure;
